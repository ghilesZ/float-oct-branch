# 12 "frontend/lexer.mll"
 
 open Lexing
 open Syntax
 open Parser


(* keyword table *)
let kwd_table = Hashtbl.create 10
let _ = 
  List.iter (fun (a,b) -> Hashtbl.add kwd_table a b)
    [
     "if",     TOK_IF;
     "else",   TOK_ELSE;
     "abs",    TOK_ABS;
     "sqrt",   TOK_SQRT;
     "init",   TOK_INIT;
     "body",   TOK_BODY;
     "goal",   TOK_GOAL;
   ]

(* (exact) parsing of decimal constants constants *)
let parse_const c =
  let rec div10 x n =
    if n <= 0 then x else div10 (Q.div x (Q.of_int 10)) (n-1)
  in
  try
    let p = String.index c '.' in
    let p' = String.length c - p - 1 in
    let x = (String.sub c 0 p)^(String.sub c (p+1) p') in
    div10 (Q.of_string x) p'
  with Not_found ->
    Q.of_string c

# 36 "frontend/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\220\255\002\000\007\000\222\255\078\000\090\000\226\255\
    \013\000\020\000\003\000\031\000\111\000\112\000\108\000\244\255\
    \108\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255\129\000\255\255\008\000\224\255\236\255\000\000\
    \234\255\235\255\057\000\233\255\059\000\232\255\114\000\231\255\
    \229\255\228\255\217\000\227\000\178\000\002\000\253\255\254\255\
    \105\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\034\000\033\000\255\255\255\255\030\000\255\255\
    \255\255\255\255\028\000\025\000\014\000\013\000\012\000\255\255\
    \010\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\032\000\255\255\255\255\015\000\
    \255\255\255\255\016\000\255\255\017\000\255\255\018\000\255\255\
    \255\255\255\255\030\000\030\000\255\255\002\000\255\255\255\255\
    \001\000\255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\028\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\047\000\255\255\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\004\000\002\000\046\000\003\000\000\000\002\000\
    \002\000\004\000\255\255\000\000\002\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\010\000\002\000\000\000\000\000\032\000\009\000\002\000\
    \025\000\024\000\015\000\017\000\019\000\016\000\005\000\014\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\040\000\018\000\013\000\011\000\012\000\007\000\
    \038\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\021\000\036\000\020\000\035\000\026\000\
    \037\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\023\000\008\000\022\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \042\000\041\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\033\000\030\000\029\000\039\000\
    \049\000\000\000\005\000\028\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\027\000\000\000\
    \000\000\000\000\000\000\000\000\034\000\031\000\000\000\000\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\000\000\046\000\000\000\000\000\045\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\048\000\000\000\000\000\000\000\
    \026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\045\000\000\000\255\255\002\000\
    \003\000\003\000\028\000\255\255\003\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\002\000\255\255\255\255\031\000\000\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\034\000\000\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \006\000\008\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\012\000\013\000\014\000\038\000\
    \048\000\255\255\016\000\014\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\026\000\255\255\
    \255\255\255\255\255\255\255\255\012\000\013\000\255\255\255\255\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\044\000\255\255\255\255\044\000\
    \255\255\255\255\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\044\000\255\255\255\255\255\255\
    \026\000\255\255\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 56 "frontend/lexer.mll"
                                                               id
# 208 "frontend/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 57 "frontend/lexer.mll"
( try Hashtbl.find kwd_table id with Not_found -> TOK_id id )
# 212 "frontend/lexer.ml"

  | 1 ->
# 61 "frontend/lexer.mll"
         ( TOK_LPAREN )
# 217 "frontend/lexer.ml"

  | 2 ->
# 62 "frontend/lexer.mll"
         ( TOK_RPAREN )
# 222 "frontend/lexer.ml"

  | 3 ->
# 63 "frontend/lexer.mll"
         ( TOK_LBRACE )
# 227 "frontend/lexer.ml"

  | 4 ->
# 64 "frontend/lexer.mll"
         ( TOK_RBRACE )
# 232 "frontend/lexer.ml"

  | 5 ->
# 65 "frontend/lexer.mll"
         ( TOK_LBRACKET )
# 237 "frontend/lexer.ml"

  | 6 ->
# 66 "frontend/lexer.mll"
         ( TOK_RBRACKET )
# 242 "frontend/lexer.ml"

  | 7 ->
# 67 "frontend/lexer.mll"
         ( TOK_COMMA )
# 247 "frontend/lexer.ml"

  | 8 ->
# 68 "frontend/lexer.mll"
         ( TOK_SEMICOLON )
# 252 "frontend/lexer.ml"

  | 9 ->
# 69 "frontend/lexer.mll"
         ( TOK_PLUS )
# 257 "frontend/lexer.ml"

  | 10 ->
# 70 "frontend/lexer.mll"
         ( TOK_MINUS )
# 262 "frontend/lexer.ml"

  | 11 ->
# 71 "frontend/lexer.mll"
         ( TOK_MULTIPLY )
# 267 "frontend/lexer.ml"

  | 12 ->
# 72 "frontend/lexer.mll"
         ( TOK_DIVIDE )
# 272 "frontend/lexer.ml"

  | 13 ->
# 73 "frontend/lexer.mll"
         ( TOK_LESS )
# 277 "frontend/lexer.ml"

  | 14 ->
# 74 "frontend/lexer.mll"
         ( TOK_GREATER )
# 282 "frontend/lexer.ml"

  | 15 ->
# 75 "frontend/lexer.mll"
         ( TOK_LESS_EQUAL )
# 287 "frontend/lexer.ml"

  | 16 ->
# 76 "frontend/lexer.mll"
         ( TOK_GREATER_EQUAL )
# 292 "frontend/lexer.ml"

  | 17 ->
# 77 "frontend/lexer.mll"
         ( TOK_EQUAL_EQUAL )
# 297 "frontend/lexer.ml"

  | 18 ->
# 78 "frontend/lexer.mll"
         ( TOK_NOT_EQUAL )
# 302 "frontend/lexer.ml"

  | 19 ->
# 79 "frontend/lexer.mll"
          ( TOK_LESS_INT )
# 307 "frontend/lexer.ml"

  | 20 ->
# 80 "frontend/lexer.mll"
          ( TOK_GREATER_INT )
# 312 "frontend/lexer.ml"

  | 21 ->
# 81 "frontend/lexer.mll"
          ( TOK_LESS_EQUAL_INT )
# 317 "frontend/lexer.ml"

  | 22 ->
# 82 "frontend/lexer.mll"
          ( TOK_GREATER_EQUAL_INT )
# 322 "frontend/lexer.ml"

  | 23 ->
# 83 "frontend/lexer.mll"
          ( TOK_EQUAL_EQUAL_INT )
# 327 "frontend/lexer.ml"

  | 24 ->
# 84 "frontend/lexer.mll"
          ( TOK_NOT_EQUAL_INT )
# 332 "frontend/lexer.ml"

  | 25 ->
# 85 "frontend/lexer.mll"
         ( TOK_ASSIGN )
# 337 "frontend/lexer.ml"

  | 26 ->
# 86 "frontend/lexer.mll"
         ( TOK_AND )
# 342 "frontend/lexer.ml"

  | 27 ->
# 87 "frontend/lexer.mll"
         ( TOK_OR )
# 347 "frontend/lexer.ml"

  | 28 ->
# 88 "frontend/lexer.mll"
         ( TOK_NOT )
# 352 "frontend/lexer.ml"

  | 29 ->
# 89 "frontend/lexer.mll"
         ( TOK_RANDOM )
# 357 "frontend/lexer.ml"

  | 30 ->
let
# 92 "frontend/lexer.mll"
           c
# 363 "frontend/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 92 "frontend/lexer.mll"
             ( TOK_const (parse_const c) )
# 367 "frontend/lexer.ml"

  | 31 ->
# 95 "frontend/lexer.mll"
       ( comment lexbuf; token lexbuf )
# 372 "frontend/lexer.ml"

  | 32 ->
# 96 "frontend/lexer.mll"
                      ( token lexbuf )
# 377 "frontend/lexer.ml"

  | 33 ->
# 97 "frontend/lexer.mll"
          ( new_line lexbuf; token lexbuf )
# 382 "frontend/lexer.ml"

  | 34 ->
# 98 "frontend/lexer.mll"
        ( token lexbuf )
# 387 "frontend/lexer.ml"

  | 35 ->
# 101 "frontend/lexer.mll"
      ( TOK_EOF )
# 392 "frontend/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 44
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 106 "frontend/lexer.mll"
       ( () )
# 404 "frontend/lexer.ml"

  | 1 ->
# 107 "frontend/lexer.mll"
                ( comment lexbuf )
# 409 "frontend/lexer.ml"

  | 2 ->
# 108 "frontend/lexer.mll"
          ( new_line lexbuf; comment lexbuf )
# 414 "frontend/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

